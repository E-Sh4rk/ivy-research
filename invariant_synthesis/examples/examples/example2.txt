
relation f(A, B)     (partial function)
relation dom(A)
individual res
individual elt

dom(elt) -> f(elt,res)

unset(a):
	dom(a) := false
	f(a,B) := false
	
set(a,b):
	dom(a) := true
	f(a,B) := B=b
	if elt=a
		res := b

get(a):
	require dom(a)
	if some r. f(a,r)
		return r
	else
		assert false

set_elt(e):
	elt := e
	if dom(elt)
		res := get(elt)

-----

dom(A) -> exists B. f(A,B)

-----

Naive generalization:

elt=0
res=0
~dom(0)
dom(1)
~f(0,0)
~f(1,0)
(set_elt(1))

~dom(elt) & dom(A) & A~=elt & ~f(elt,B) & ~f(A,B)

WRONG!!

My algorithm:
(see Capture3.png)
F A:example2.a. example2.dom(A) -> (E B:example2.b. example2.f(A, B))