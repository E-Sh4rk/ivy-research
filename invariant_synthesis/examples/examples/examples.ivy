#lang ivy1.7

object example1 =
{
	type a
	type b

	function f(X:a) : b
	individual elt1 : a
	individual elt2 : a
	
	after init
	{
		assume elt1 ~= elt2;
	}
	
	action swap(x:a,y:a) =
	{
		var tmp := f(x);
		f(x) := f(y);
		f(y) := tmp;
	}
	
	action change_elt1(elt:a) =
	{
		require elt ~= elt2;
		elt1 := elt;
	}
	
	action change_elt2(elt:a) =
	{
		require elt ~= elt1;
		elt2 := elt;
	}
	
	conjecture f(elt1) ~= f(elt2)
	conjecture ~(f(elt2) = f(A) & A ~= elt2)
	conjecture ~(f(A)=f(B) & B~= A & A ~= elt2 & B ~= elt2)
	
	export swap
	export change_elt1
	export change_elt2
}

object example2 =
{
	type a
	type b

	relation f(X:a,Y:b)
	relation dom(X:a)
	individual elt : a
	individual res : b
	
	after init
	{
		dom(X) := false;
		f(X,Y) := false;
	}
	
	action unset(x:a) =
	{
		dom(x) := false;
		f(x,B) := false; 
	}
	
	action set(x:a,y:b) =
	{
		dom(x) := true;
		f(x,y) := true;
		if elt=x {
			res := y;
		};
	}
	
	action get(x:a) returns (y:b) =
	{
		require dom(x);
		if some r:b. f(x,r)
		{
			y := r;
		}
		else
		{
			assert false;
		};
	}
	
	action set_elt (e:a) =
	{
		elt := e;
		if dom(elt) {
			res := get(elt);
		};
	}
	
	conjecture dom(elt) -> f(elt,res)
	
	export unset
	export set
	export get
	export set_elt
}

isolate iso1 = example1
isolate iso2 = example2
