delmap.ivy:

	conjecture map(K,V) & map(K,W) -> V = W

	conjecture imap.maps(key.iter.val(I),V) & imap.gap(I,J) & key.iter.between(I,K,J) -> map(K,V)
	conjecture imap.contains(0)

key.ivy:

proto.ivy:

	# If I own this key, then my hash table data matches the reference
	conjecture impl.dm.map(K,me) -> hash.hash(K) = ref.map(K)

	# If I own this key, then no one else does
	conjecture impl.dm.map(K,me) & X ~= me -> ~proto.impl.dm(X).map(K,X)

	# If I own this key, then no delegated shard does
	conjecture impl.dm.map(K,me) -> ~(trans.delegated(X,S) & key.iter.between(shard.lo(S),K,shard.hi(S)))

	# No two delegated shards have keys in common
	conjecture trans.delegated(X,S) & key.iter.between(shard.lo(S),K,shard.hi(S))
		   & trans.delegated(X1,S1) & key.iter.between(shard.lo(S1),K,shard.hi(S1))
		   -> X = X1 & S = S1
		   
	# Forwarded requests have correct operations relative to the reference
	conjecture trans.requested(D,R) & L = req.rtxid(R)->
		   (req.rkey(R) = ref.key_(L) &
			req.rtype(R) = ref.type_(L) &
			(req.rtype(R) = ref.write -> req.rdata(R) = ref.data_(L)))
			
	# Forwarded replies have correct operations relative to the reference
	conjecture trans.replied(D,R) & L = req.rtxid(R)->
		   (req.rkey(R) = ref.key_(L) &
			req.rtype(R) = ref.type_(L) &
			req.rdata(R) = ref.data_(L))
			
	# All forwarded requests have been generated but not committed
	conjecture trans.requested(D,R) -> ref.generated(req.rtxid(R)) & ~ref.committed(req.rtxid(R))

	# All forwarded replies have been generated and committed
	conjecture trans.replied(D,R) -> ref.generated(req.rtxid(R)) & ref.committed(req.rtxid(R))

	# No two forwarded requests with the same txid
	conjecture trans.requested(D1,R1) & trans.requested(D2,R2) & req.rtxid(R1) = req.rtxid(R2)
		   -> D1 = D2 & R1 = R2
		   
	# No two forwarded replies with the same txid
	conjecture trans.replied(D1,R1) & trans.replied(D2,R2) & req.rtxid(R1) = req.rtxid(R2)
		   -> D1 = D2 & R1 = R2
		   
	# Delegated shards have correct data
	conjecture trans.delegated(X,S) & key.iter.between(shard.lo(S),K,shard.hi(S)) -> shard.value(S,K) = ref.map(K)

	# Every shard in transit is valid
	conjecture trans.delegated(D,S) -> shard.valid(S)

queue.ivy:

	conjecture imap.maps(X,Y) -> X = net_msg.num(Y)
	conjecture contents(Y) <-> imap.maps(net_msg.num(Y),Y)
	
reference.ivy:

	conjecture committed(T) -> generated(T)

seqnum.ivy:

shard.ivy:

sht.ivy:

table.ivy:

	#conjecture shard.value(S,X)=Z -> spec.tab_invar(X,Y)
	conjecture spec.tab_invar(X,Y)

trans.ivy:

	# If I have a request message for D enqueued and if its sequence number is
	# >= D's receive sequence number, then the message is pending.
	conjecture mq(D).contents(M) & impl(D).recv_seq(me) <= net_msg.num(M)
	   & net_msg.mty(M) = request_t -> requested(D,net_msg.rq(M))

	# If I have a reply message for D enqueued and if its sequence number is
	# >= D's receive sequence number, then the message is pending.
	conjecture mq(D).contents(M) & impl(D).recv_seq(me) <= net_msg.num(M)
	   & net_msg.mty(M) = reply_t -> replied(D,net_msg.rq(M))

	# If I have a delegate message for D enqueued and if its sequence number is
	# >= D's receive sequence number, then the message is pending.
	conjecture mq(D).contents(M) & impl(D).recv_seq(me) <= net_msg.num(M)
	   & net_msg.mty(M) = delegate_t -> delegated(D,net_msg.sh(M))

	# A given request cannot occur twice in the network
	conjecture impl(S1).mq(D).contents(M1) & impl(D).recv_seq(S1) <= net_msg.num(M1)
	   & impl(S2).mq(D).contents(M2) & impl(D).recv_seq(S2) <= net_msg.num(M2)
	   & net_msg.mty(M1) = request_t & net_msg.mty(M2) = request_t 
	   & (S1 ~= S2 | net_msg.num(M1) ~= net_msg.num(M2))
	   -> net_msg.rq(M1) ~= net_msg.rq(M2)

	# A given reply cannot occur twice in the network
	conjecture impl(S1).mq(D).contents(M1) & impl(D).recv_seq(S1) <= net_msg.num(M1)
	   & impl(S2).mq(D).contents(M2) & impl(D).recv_seq(S2) <= net_msg.num(M2)
	   & net_msg.mty(M1) = reply_t & net_msg.mty(M2) = reply_t 
	   & (S1 ~= S2 | net_msg.num(M1) ~= net_msg.num(M2))
	   -> net_msg.rq(M1) ~= net_msg.rq(M2)

	# A given delegation cannot occur twice in the network
	conjecture impl(S1).mq(D).contents(M1) & impl(D).recv_seq(S1) <= net_msg.num(M1)
	   & impl(S2).mq(D).contents(M2) & impl(D).recv_seq(S2) <= net_msg.num(M2)
	   & net_msg.mty(M1) = delegate_t & net_msg.mty(M2) = delegate_t 
	   & (S1 ~= S2 | net_msg.num(M1) ~= net_msg.num(M2))
	   -> net_msg.sh(M1) ~= net_msg.sh(M2)

	# The sending seq number is greater than any queue entry
	conjecture mq(D).contents(M) -> ~(send_seq(D) <= net_msg.num(M))

	# No two messages in a queue have the same sequence number
	conjecture mq(D).contents(M1) & mq(D).contents(M2) & M1 ~= M2
		-> net_msg.num(M1) ~= net_msg.num(M2)

	# A sent non-ack message must match any message queue entry with the same
	# sequence number
	conjecture lower.spec.sent(M,D) & net_msg.src(M) = me
	   & mq(D).contents(M2) & net_msg.num(M2) = net_msg.num(M)
	   & net_msg.mty(M) ~= ack_t -> M = M2

	# Following added due to counterexamples

	# A sent non-ack message with seq num >= receiver must be in the
	# corresponding queue
	conjecture lower.spec.sent(M,D) & net_msg.src(M) = S
	  & impl(D).recv_seq(S) <= net_msg.num(M) & net_msg.mty(M) ~= ack_t
	  -> impl(S).mq(D).contents(M)

	# If an ack is sent, the receiving seq_num must be greater
	conjecture lower.spec.sent(M,D) & net_msg.src(M) = S
	  & net_msg.mty(M) = ack_t -> ~(impl(S).recv_seq(D) <= net_msg.num(M))

	# The sending seq number is greater than non-ack sent message
	conjecture lower.spec.sent(M,D) & net_msg.src(M) = me & net_msg.mty(M) ~= ack_t
			 -> ~(send_seq(D) <= net_msg.num(M))

	# A message in the queue has correct src and is not ack
	conjecture mq(D).contents(M) -> net_msg.src(M) = me & net_msg.mty(M) ~= ack_t
