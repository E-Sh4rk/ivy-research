Bugs:

Many runtime exceptions in the model checking tool
Runtime excetpions when using enumerated types
Can't build their sharded ht example (doc/examples/sht)! (python runtime exception) ----> FIXED!
GENERALISATION+MINIMIZATION TOOL BUG (see custom queue). Hypothesis: bad initialization for ivy codes > 1.3-7 ?

--

Possible Improvements:

More (interpreted) types! Sum types, tuples, etc
Way to abstract custom types representation (for instance queue) -> directives to change display (example: transitive flag)
Ivy_to_cpp : store relations using other ways in order to allow more things on non-iterable type (like structs) + permit to use functions if of the form (default value + finite nb of exceptions)
FIX THE MODEL CHECKING TOOL/GENERALISATION METHOD

--

Things to think about:

Deep spec layers (shao) -> two impl levels?

Session types & other strong types to reduce search space (adding structure) -> can allow some quantifier alternation on some types?

Umut work on provenance -> error location (for asserts & invariants), based on counterexamples found by Ivy (counterexamples allow us to use dynamic backward slicing) :
like causal analysis : given a trace of execution (the counter example) and a formula, determine what have made the formula false (trace slice or program slice)
Pb: what aspect of the formula we should focus on? And the code is not the true responsible, it is the initial configuration...

Could develop a new method for the construction of interactive invariant. We could ask to the user a change to bring to the initial model in order to be correct,
instead of highlighting all responsible constraints. Then we could analyse the changes that it brings to the resulting trace.
--> Approach more based on code analysis
Advantages: more intuitive? give simpler/more intuitive invariants? can sometimes succeed where current method fail whatever constraints we choose? (edit: current methods fails seems to be due to a bug)