#lang ivy1.7

#
# A queue for testing the interactive invariant construction tool
#

module total_order(t,r) = {
    axiom r(X:t,X)                        # Reflexivity
    axiom r(X:t, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X:t, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X:t, Y) | r(Y, X)             # Totality
}

object incrementable = {

    type t
    relation (X:t <= Y:t)

    relation succ(X:t,Y:t)

    action next(input:t) returns (output:t) # No implementation given: it is an abstract module
    
    # Specifications of this abstract module
    object spec = {
	property succ(X,Z) -> (X < Z & ~(X < Y & Y < Z))

        instantiate total_order(t, <=) 

        after next {
            assert ~(output <= input) ;
	    assert succ(input, output)
        }
    }

    # Provide an implementation for this abstract module (=interface). Not needed if we just want to prove the lock protocol.
    object impl = {

	interpret t -> int

	definition succ(X,Y) = (Y = X + 1)

        implement next {
	    assume input + 1 > input ;
            output := input + 1
        }
    }
}

module unbounded_queue(data) =
{
    individual next_e : incrementable.t
    relation content(D:data, E:incrementable.t)
    individual first_e : incrementable.t
    individual first : data
	relation has_data(E:incrementable.t)

    after init
    {
	content(D,E) := false ;
	first_e := 0 ;
	next_e := 0 ;
	has_data(E) := false
    }

    derived empty = next_e <= first_e

    action push (da:data) =
    {
	if empty
	{
	    first := da
	} ;
	content(da, next_e) := true ;
	next_e := incrementable.next(next_e)
    }

    action pop returns (res:data) =
    {
	require ~empty ;
	res := first ;
	content(first, first_e) := false ;
	first_e := incrementable.next(first_e) ;
	if has_data(first_e) #some nf:data. content(nf,first_e)
	{
		var nf:data ;
		assume content(nf, first_e) ; 
	    first := nf
	}
    }

	before push (da:data)
	{
	    has_data(next_e) := true #exists F. content(F, old next_e)
	}
	before pop
	{
		has_data(first_e) := false #exists F. content(F, old first_e)
	}

    object spec =
    {
	conjecture content(A,B) -> has_data(B)

	conjecture first_e <= next_e
	conjecture ~empty -> content(first, first_e)
	conjecture forall E,F,G. (content(E,G) & content(F,G)) -> E=F
	conjecture forall E,F. content(E,F) -> (~next_e <= F & first_e <= F)
	conjecture forall E. (first_e <= E & ~next_e <= E) -> has_data(E)
    }

    export pop
    export push
}

type data
interpret data -> int
instance q: unbounded_queue(data)

isolate iso_incr = incrementable
isolate iso_queue = q with incrementable
extract iso_impl = q, incrementable
